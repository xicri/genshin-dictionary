name: "actions"

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - edited
      - reopened
      - synchronize
  push:
    branches:
      - main
  repository_dispatch:
    types:
      - langdata-update

jobs:
  test:
    timeout-minutes: 15
    env:
      SERVER_ENV: local
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: cache playwright browsers
        id: playwright-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ hashFiles('**/package-lock.json') }}

      - run: npm ci
      - run: npx playwright install-deps
      - run: npm run build
      - run: npm test
      - run: npm run lint

  staging:
    if: ${{ github.ref != 'refs/heads/main' && github.repository_owner == 'xicri' }}
    timeout-minutes: 10
    env:
      SERVER_ENV: staging
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: generate Dockerfile_staging
        run: |
          cp Dockerfile Dockerfile_staging
          sed -i -e 's/production/staging/g' Dockerfile_staging
      - run: flyctl deploy --remote-only --app=genshin-dictionary-staging --dockerfile=Dockerfile_staging

  production:
    if: ${{ github.ref == 'refs/heads/main' && github.repository_owner == 'xicri' }}
    needs: test
    timeout-minutes: 10
    env:
      SERVER_ENV: production
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only

      - name: Purge Cloudflare cache
        run: |
          npm install node-fetch
          npm run purge-cache
